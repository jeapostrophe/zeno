#lang racket/base
(require racket/set
         racket/match)

(struct *rvector (vec) #:transparent #:mutable)
(define (rvector size)
  (*rvector (make-vector size #f)))
(define (rvector-size rv)
  (vector-length (*rvector-vec rv)))
(define (rvector-resize! rv new-size)
  (define new (make-vector new-size #f))
  (vector-copy! new 0 (*rvector-vec rv))
  (set-*rvector-vec! rv new))
(define (rvector-set! rv i v)
  (vector-set! (*rvector-vec rv) i v))
(define (rvector-ref rv i)
  (vector-ref (*rvector-vec rv) i))

(struct *gvector (hd keys rv) #:transparent #:mutable)
(define (gvector)
  (*gvector 0 (mutable-seteq) (rvector 1)))
(define (gvector-alloc! gv)
  (match gv
    [(*gvector #f keys vec)
     (define old-len (rvector-size vec))
     (define new-len (* 2 old-len))
     (rvector-resize! vec new-len)
     (for ([i (in-range old-len new-len)])
       (rvector-set! vec i (+ i 1)))
     (rvector-set! vec (- new-len 1) #f)
     (set-*gvector-hd! gv old-len)
     (gvector-alloc! gv)]
    [(*gvector hd keys vec)
     (set-add! keys hd)
     (set-*gvector-hd! gv (rvector-ref vec hd))
     hd]))
(define (gvector-free! gv i)
  (rvector-set! (*gvector-rv gv) i (*gvector-hd gv))
  (set-remove! (*gvector-keys gv) i)
  (set-*gvector-hd! gv i))
(define (gvector-set! gv i v)
  (rvector-set! (*gvector-rv gv) i v))
(define (gvector-ref gv i)
  (rvector-ref (*gvector-rv gv) i))

(provide gvector gvector-alloc! gvector-free! gvector-ref gvector-set!)
